var hddStruct = 
{
    radius1 : 45,
    radius2 : 85,
    radius3 : 125,
    l1: 
    {
        startAngle: 0,
        endAngle: 2*Math.PI,
        name: 'C:',
        color: '#F77D7D'
    },
    l2: [
            {
                startAngle: 0,
                endAngle: Math.PI / 4,
                name: 'C:',
                color: 'red'
            },
            {
                startAngle: Math.PI / 4,
                endAngle: Math.PI / 2 + Math.PI / 3,
                name: 'C:',
                color: 'yellow'
            },
            {
                startAngle: Math.PI / 2 + Math.PI / 3,
                endAngle: Math.PI,
                name: 'C:',
                color: 'black'
            },
            {
                startAngle: Math.PI,
                endAngle: Math.PI + Math.PI / 4,
                name: 'C:',
                color: 'blue'
            },
            {
                startAngle: Math.PI + Math.PI / 4,
                endAngle: 2*Math.PI,
                name: 'C:',
                color: 'purple'
            }
        ],
    l3: [
            {
                startAngle: 0,
                endAngle: Math.PI / 6,
                name: 'C:',
                color: 'rgb(212, 106, 106)'
            },
            {
                startAngle: Math.PI / 6,
                endAngle: Math.PI / 4 + Math.PI / 2,
                name: 'C:',
                color: 'rgb(71, 144, 48)'
            },
            {
                startAngle: Math.PI / 4 + Math.PI / 2,
                endAngle: Math.PI ,
                name: 'C:',
                color: 'rgb(112, 142, 164)'
            },
            {
                startAngle: Math.PI,
                endAngle: Math.PI + Math.PI / 8,
                name: 'C:',
                color: 'rgb(255, 226, 170)'
            },
            {
                startAngle: Math.PI + Math.PI / 8,
                endAngle: Math.PI + Math.PI /6,
                name: 'C:',
                color: 'rgb(170, 85, 133)'
            },
            {
                startAngle: Math.PI + Math.PI / 6,
                endAngle: Math.PI + Math.PI /2,
                name: 'C:',
                color: 'rgb(170, 151, 57)'
            },
            {
                startAngle: Math.PI + Math.PI / 2,
                endAngle: 2 * Math.PI,
                name: 'C:',
                color: 'rgb(251, 82, 82)'
            }        
        

        ],
}

function clearCanvas(canvas, ctx){
    ctx.save();
    ctx.setTransform(1, 0, 0, 1, 0, 0);
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.restore();
}

var canvas = document.getElementById('canvas');
var ctx = canvas.getContext('2d');

function getMousePosition(canvas, e){
    var rect = canvas.getBoundingClientRect();
    return {
            x: e.clientX - rect.left,
            y: e.clientY - rect.top
        };
}

function hit(point){
    var p = {x: point.x - 200, y: point.y - 200};
    var angle = Math.atan2(p.x, p.y);
    //da modificare con radius3
    if(Math.pow(p.x, 2) + Math.pow(p.y, 2) < Math.pow(hddStruct.radius3, 2)){

        if(p.x < 0 && p.y > 0){
            angle = Math.PI / 2 + Math.abs(angle);
            //console.log("quad 1: " + angle);
        }
        else if(p.x < 0 && p.y < 0){
            angle = Math.PI / 2 + Math.abs(angle);
            //console.log("quad 2: " + angle);
        }
        else if(p.x > 0 && p.y < 0){
            angle = 2 * Math.PI - Math.abs(Math.PI / 2 - angle);
            //console.log("quad 3: " + angle);
        }
        else{
            angle = Math.PI / 2 - angle;
            //console.log("quad 0: " + angle);
        }
        
        if(Math.pow(p.x, 2) + Math.pow(p.y, 2) < Math.pow(hddStruct.radius1, 2)){
            animate(hddStruct.l1, hddStruct.radius1 + 20, 1);   
        }
        else if(Math.pow(p.x, 2) + Math.pow(p.y, 2) < Math.pow(hddStruct.radius2, 2)){
            console.log('l2');
            for(var i = 0; i < hddStruct.l2.length; i++){
                if(angle > hddStruct.l2[i].startAngle && angle < hddStruct.l2[i].endAngle){
                    console.log("il punto appartiene al settore " + hddStruct.l2[i].color.toLocaleUpperCase());
                    animate(hddStruct.l2[i], hddStruct.radius2 + 60, 2);
                }
            }
        }
        else if(Math.pow(p.x, 2) + Math.pow(p.y, 2) < Math.pow(hddStruct.radius3, 2)){
            console.log('l3');
            for(var i = 0; i < hddStruct.l3.length; i++){
                if(angle > hddStruct.l3[i].startAngle && angle < hddStruct.l3[i].endAngle){
                    console.log("il punto appartiene al settore " + hddStruct.l3[i].color.toLocaleUpperCase());
                    animate(hddStruct.l3[i], hddStruct.radius3 + 60, 3);
                }
            }
        }
    }
    else{
        drawHdd();
    }
}

function animate(s, radius, level){
    drawHdd();
    
    if(level == 3){
        drawSectors(hddStruct.l3, hddStruct.radius3);
        drawCircle(s.startAngle, s.endAngle, radius, s.color);
        drawSectors(hddStruct.l2, hddStruct.radius2);
    }
    else if(level == 2){
        drawSectors(hddStruct.l3, hddStruct.radius3);
        drawSectors(hddStruct.l2, hddStruct.radius2);
        drawCircle(s.startAngle, s.endAngle, radius, s.color);
    }
    
    if(level != 1){
        drawCircle(hddStruct.l1.startAngle, hddStruct.l1.endAngle, hddStruct.radius1, hddStruct.l1.color);
        var center = calcCenter(s, radius, level);
        drawText(s, center);
    }
    else{
        drawCircle(s.startAngle, s.endAngle, radius, s.color);
        drawText(s, {x: 200, y: 200});
    }
}

canvas.addEventListener('mousemove', function(e){
    var mousePos = getMousePosition(canvas, e);
    console.log(mousePos);
    hit(mousePos);
}, false);

function drawText(s, p){
    ctx.font = "Bold 30px Roboto";
    ctx.fillText(s.name, p.x, p.y);
}

function drawCircle(startAngle, endAngle, radius, color){
    ctx.fillStyle = color;
    ctx.strokeStyle = color;
    ctx.beginPath();
    ctx.lineTo(200,200);
    ctx.arc(200, 200, radius, startAngle, endAngle, false);
    ctx.lineTo(200,200);
    ctx.stroke();
    ctx.fill();
}

function drawHdd(){
    clearCanvas(canvas, ctx);
    drawSectors(hddStruct.l3, hddStruct.radius3);
    drawSectors(hddStruct.l2, hddStruct.radius2);
    drawCircle(hddStruct.l1.startAngle, hddStruct.l1.endAngle, hddStruct.radius1, hddStruct.l1.color);
}

function drawSectors(s, r){
    for(var i = 0; i < s.length; i++){
        drawCircle(s[i].startAngle, s[i].endAngle, r, s[i].color);
    }
}

function calcCenter(sector, radius, level){
    var offset = 0;
    
    if(level != 1){
        if(Math.abs(sector.startAngle - sector.endAngle) > Math.PI / 4)
            offset = 110;
        else
            offset = 30;
    }
    
    radius += offset;
    
    var o = {
        x: 200,
        y: 200
    }
    
    var ps = {
        x: o.x + radius * (Math.cos(sector.startAngle)),
        y: o.y + radius * (Math.sin(sector.startAngle))
    }
    
    var pe = {
        x: o.x + radius * (Math.cos(sector.endAngle)),
        y: o.y + radius * (Math.sin(sector.endAngle))
    }
    
    var center = {
        x: ((o.x + ps.x + pe.x) / 3),
        y: ((o.y + ps.y + pe.y) / 3) 
    }
    
    debugSector(o, ps, pe, center);

    return center;
}
/*
    funzioni di supporto per il debug dei settori
*/
function debugSector(o, ps, pe, center){
    drawArc(ps);
    drawArc(pe);
    drawArc(o);
    drawTriangle(o, ps, pe, center);
}

function drawTriangle(o, ps, pe, center){
    console.log("start {x: " + ps.x + ",y: " + ps.y + "}" 
        + "end {x: " + pe.x + ",y: " + pe.y + "}" 
        + "center {x: " + center.x + ",y: " + center.y + "}");
    ctx.strokeStyle = "black";
    ctx.fillStyle = "black";
    ctx.beginPath();
    ctx.lineTo(o.x, o.y);
    ctx.lineTo(ps.x, ps.y);
    ctx.lineTo(pe.x, pe.y);
    ctx.lineTo(o.x, o.y);
    ctx.stroke();   

    ctx.beginPath();
    ctx.arc(center.x, center.y, 3, 0, 2 * Math.PI, false);
    ctx.fill();
    
}

function drawArc(p){
    ctx.fillStyle = 'cyan';
    ctx.beginPath();
    ctx.arc(p.x, p.y, 3, 0, 2 * Math.PI, false);
    ctx.fill();
}

drawHdd();
