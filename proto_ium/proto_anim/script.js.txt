/*
#########################################
    STRUTTURA DATI PER IL SIMULATORE
#########################################
*/
var processDict = [
    'system',
    'windows explorer',
    'google chrome',
    'adobe reader',
    'vlc',
    'battlefield',
    'portal',
    'sublime text',
    'spotify',
    'netflix',
    'github',
    'visual studio',
    'photoshop',
    'doom',
    'nvidia manager',
    'microsoft edge',
    'android',
    'telegram',
    'paint',
    'file explorer',
    'cortana',
    'siri',
    'steam',
    'origin',
    'blender'
    ];
    
//struttura per la gestione dei dati
var components = {
    criterion: 'cpu',
    cpu: [],
    ram: 
        {
            color: "rgb(200,0,0)",
            size: 6, //6gb
            points: [{x: 0, y: 0}]
        },
    hdd: [],
    process: 
        [
            {
                name: processDict[0],
                cpu: 0,
                ram: 0,
                hdd: 0,
                check: false
            }    
        ]
}

var initComponents = function(n_cpu, n_hdd){
    
    if(n_cpu == undefined || n_hdd == undefined || isNaN(n_cpu) || isNaN(n_hdd) || n_cpu < 0 || n_hdd < 0){
        console.log("errore parametri inizializzazione");
        components = undefined;
        return;
    }

    for(var i = 0; i < n_cpu; i++)
        components.cpu.push(
            {
                num: i,
                name: "cpu_" + i,
                color: "rgb(200,0,0)",
                points: [{x: 0, y: 0}]
            }    
        );
        
    for(var i = 0; i < n_hdd; i++)
        components.hdd.push(
            {
                num: i,
                name: "hdd_" + i,
                color: "rgb(200,0,0)",
                points: [{x: 0, y: 0}]
            }    
        );
}
/*
######################################
                HDD
######################################
*/
var hddStep = function(){
    function currentUse(){
        var count = 0;
        
        for(var i = 0; i < components.process.length; i++)
            count += components.process[i].hdd;
            
        return count;
    }
    
    var totalUse = currentUse();
    var sum = 0;
    
    for(var i = 0; i < components.hdd.length - 1; i++){
        sum = pointsStep(components.hdd[i], totalUse, sum);
    }
    
    checkAndShift(components.hdd[i].points);
    
    components.hdd[i].points.push(
        {
            x: components.hdd[i].length * 20,
            y: totalUse - sum
        }
    );
}
/*
######################################
                RAM
######################################
*/
var ramStep = function(){
    function currentUse(){
        var count = 0;
        
        for(var i = 0; i < components.process.length; i++)
            count += components.process[i].ram;
            
        return count;
    }
    
    checkAndShift(components.ram.points);
    
    components.ram.points.push(
        {
            x: components.ram.points.length * 20,
            y: currentUse()
        }
    );
}
/*
######################################
                CPU
######################################
*/
var cpuStep = function(){
    function currentUse(){
        var count = 0;
        
        for(var i = 0; i < components.process.length; i++)
            count += components.process[i].cpu;
            
        return count;
    }
    
    var totalUse = currentUse();
    var sum = 0;
    
    for(var i = 0; i < components.cpu.length - 1; i++){
        sum = pointsStep(components.cpu[i], totalUse, sum);
    }
    
    checkAndShift(components.cpu[i].points);
    
    components.cpu[i].points.push(
        {
            x: components.cpu[i].length * 20,
            y: totalUse - sum
        }
    );
}
/*
######################################
            FUNZIONI COMUNI
######################################
*/

function checkAndShift(parr){
    if(parr.length == 20){
        parr.shift();
        parr.map(sub_x);
    }
}

function step(){
    processStep();
    processOrderCriterion(components.criterion);
    cpuStep();
    ramStep();
    hddStep();

}

function sub_x(p){p.x -= 20;}
    
var pointsStep = function(parr, totalUse, sum){

    checkAndShift(parr.points);
    
    var newY = Math.floor(Math.random() * (totalUse - sum));
    parr.points.push(
        {
            x: parr.points.length * 20,
            y: newY
        }
    );
        
    sum += newY;
    return sum;
}
/*
######################################
                PROCESS
######################################
*/
//non funge
var processOrderCriterion = function(criterion){
    if(criterion == 'cpu')
        components.process.sort(cpuCriterion);
    else if(criterion == 'ram')
        components.process.sort(ramCriterion);
    else if(criterion == 'hdd')
        components.process.sort(hddCriterion);
        
}

function cpuCriterion(p, q){
    if(p.cpu < q.cpu)
        return 1;
        
    if(p.cpu > q.cpu)
        return -1;
        
    return 0;
}

function ramCriterion(p, q){
    if(p.ram < q.ram)
        return 1;
        
    if(p.ram > q.ram)
        return -1;
        
    return 0;
}

function hddCriterion(p, q){
    if(p.hdd < q.hdd)
        return 1;
        
    if(p.hdd > q.hdd)
        return -1;
        
    return 0;
}

var addProcess = function(){
    var processName = processDict[Math.floor(Math.random()*(processDict.length - 1)) + 1];
    
    components.process.push(
        {
            name: processName,
            cpu: 0,
            ram: 0,
            hdd: 0,
            check: false
        }    
    );

    console.log("aggiunto processo: " + processName)
}

var processStep = function(){
    var cpu = Math.floor(Math.random()*100);
    cpu = Math.floor(cpu - (cpu * 65) / 100);
    var ram = Math.floor(Math.random()*100);
    ram = Math.floor(ram - (ram * 80) / 100);
    var hdd = Math.floor(Math.random()*100);
    hdd = Math.floor(hdd - (hdd * 90) / 100);
    var scpu = cpu, sram = ram, shdd = hdd;
    
    components.process[0].cpu = cpu;
    components.process[0].ram = ram;
    components.process[0].hdd = hdd;
    
    //ci tolgo una percentuale per rendere la simulazione pi√π reale
    for(var i = 1; i < components.process.length; i++){
        cpu = Math.floor(Math.random()*(100 - scpu));
        cpu = Math.floor(cpu - (cpu * 65) / 100);
        ram = Math.floor(Math.random()*(100 - sram));
        ram = Math.floor(ram - (ram * 80) / 100);
        hdd = Math.floor(Math.random()*(100 - shdd));
        hdd = Math.floor(hdd - (hdd * 90) / 100);
        scpu += cpu;
        sram += ram;
        shdd += hdd;
        
        components.process[i].cpu = cpu;
        components.process[i].ram = ram;
        components.process[i].hdd = hdd;
    }
}

var removeProcess = function(processName){
    var index = -1;

    if(processName == processDict[0]){
        console.log("impossibile eliminare system.exe");
        return false;
    }

    for(var i = 0; i < components.process.length; i++){
        if(components.process[i].name == processName){
            index = i;
            break;
        }
    }
    
    if(index > -1){
        components.process.splice(index, 1);
        console.log("processo " + processName + " eliminato. Si trovava in posizione " + index);
        return true;
    }
    else{
        console.log("nessun processo " + processName + " trovato")
        return false;
    }
        
}

var changeCheckProcess = function(pname){
    for(var i = 0; i < components.process.length; i++){
        if(components.process[i].name == pname)
            components.process[i].check = !components.process[i].check;
    }
}
/*
################################################################################
    STRUTTURA DATI PER UI
################################################################################
*/
var monitor = {
    currentView: 'home',
    cpuHome: undefined,
    ramHome: undefined,
    hddHome: undefined,
    table: undefined,
    cpu: [],
    ram: [],
    hdd: [],
    row: [] //le righe del task manager
}
/*
################################################################################
    ALG. ANIMAZIONE
################################################################################
*/
/*
#########################################
    ALG. ANIMAZIONE HOME
#########################################
*/
var animateHomePB = function(){
    var totalCpu = 0;
    var totalRam = 0;
    var totalHdd = 0;
    
    for(var i = 0; i < components.process.length; i++){
        totalCpu += components.process[i].cpu;
        totalRam += components.process[i].ram;
        totalHdd += components.process[i].hdd;
    }
    var i = monitor.cpuHome.getElementsByClassName('progress')[0];
    monitor.cpuHome.getElementsByClassName('progress')[0].getElementsByTagName('span')[0].style.width = totalCpu + "%";
    monitor.cpuHome.getElementsByTagName('span')[1].innerHTML = totalCpu + "%";
    monitor.ramHome.getElementsByClassName('progress')[0].getElementsByTagName('span')[0].style.width = totalRam + "%";
    monitor.ramHome.getElementsByTagName('span')[1].innerHTML = totalRam + "%";
    monitor.hddHome.getElementsByClassName('progress')[0].getElementsByTagName('span')[0].style.width = totalHdd + "%";
    monitor.hddHome.getElementsByTagName('span')[1].innerHTML = totalHdd + "%";
    
    animateTable();
}

var animateTable = function(){
   var oldtbody = monitor.table.getElementsByTagName('tbody')[0];
   var tbody = document.createElement('tbody');
   monitor.table.removeChild(oldtbody);
   monitor.table.appendChild(tbody);
   monitor.row = [];
   generateProcessTable();
}

/*
################################################################################
    ALG. GENERAZIONE UI
################################################################################
*/
/*
#########################################
    ALG. GESTIONE PROCESS TABLE
#########################################
*/
var checkTableConsistency = function(){
    return monitor.row.length == components.process.length;
}

var addRow = function(p){
        var tr = document.createElement('tr');
        
        tr.addEventListener("click",function(e){
            var check = tr.getAttribute('class');
            var pname = tr.getElementsByTagName('td')[0].getAttribute('data-title');
            
            if(check == 'checked')
                tr.setAttribute('class', '');
            else
                tr.setAttribute('class', 'checked');
                
                changeCheckProcess(pname);
    },false);
        
        if(p.check == true)
            tr.setAttribute('class', 'checked');
            
        var processTD = document.createElement('td');
        processTD.setAttribute('data-title', p.name);
        
        var processLabel = document.createElement('label');
        processLabel.setAttribute('class', 'process_label');
        var cb = document.createElement('input');
        cb.type = 'checkbox';
        cb.class = 'class';
        cb.checked = p.check;
        cb.id = 'check_' + p.name;
        
        var spanName = document.createElement('span');
        spanName.innerHTML = p.name;
        
        var cputd = document.createElement('td');
        cputd.setAttribute('data-title', 'cpu');
        cputd.innerHTML = p.cpu;
        
        var ramtd = document.createElement('td');
        ramtd.setAttribute('data-title', 'ram');
        ramtd.innerHTML = p.ram;
        
        var hddtd = document.createElement('td');
        hddtd.setAttribute('data-title', 'hdd');
        hddtd.innerHTML = p.hdd;
    
        processLabel.appendChild(cb);
        processLabel.appendChild(spanName);
        processTD.appendChild(processLabel);
        tr.appendChild(processTD);
        tr.appendChild(cputd);
        tr.appendChild(ramtd);
        tr.appendChild(hddtd);
        
        return tr;
}
/*
    NOTA: per adesso si basa su una struttura components.process statica:
    nel caso vi fosse ordinamento dobbiamo riportare questo ordinamento su
    monitor.row (la soluzione pi√π veloce √® quella di sovrascrivere i monitor.row)
*/
var removeRow = function(pname){
    var tbody = monitor.table.getElementsByTagName('tbody')[0];
    var rows = tbody.getElementsByTagName('tr');
    
    if(removeProcess(pname) == true){
        for(var i = 0; i < rows.length; i++){
            var processName = rows[i].getElementsByTagName('td')[0];
            
            if(processName.getAttribute('data-title') == pname){
                tbody.removeChild(rows[i]);
                monitor.row.splice(i, 1);
            }
        }
    }
}

var generateProcessTable = function(){
    var tbody = monitor.table.getElementsByTagName('tbody')[0];
    var endProcess = false;
    
    for(var p in components.process){
        p = components.process[p];
        
        var tr = addRow(p);
        
        if(endProcess == false && tr.getAttribute('class') == 'checked')
            endProcess = true;
        
        tbody.appendChild(tr);
        monitor.row.push(tr);
    }
    
    if(endProcess == true)
        document.getElementById('remove-process').style.display = '';
    else
        document.getElementById('remove-process').style.display = 'none';
}
/*
#########################################
    ALG. GENERAZIONE HOME
#########################################
*/
var generateHome = function(){
    monitor.cpuHome = document.getElementById('cpu-home');
    monitor.ramHome = document.getElementById('ram-home');
    monitor.hddHome = document.getElementById('hdd-home');
    monitor.table = document.getElementById('table');
    
    generateProcessTable();
    setHomeListeners();
}

var setHomeListeners = function(){
    var thead = monitor.table.getElementsByTagName('thead')[0];
    var ths = thead.getElementsByTagName('tr')[0].getElementsByTagName('th');
    var endProcess = document.getElementById('remove-process');
    
    function clearCriterion(){
        for(var i = 0; i < ths.length; i++)
            ths[i].setAttribute('class', '');
    }
    
    //ths[0] √® processName che non ha alcun impatto sull'ordine dei processi
    ths[1].addEventListener("click",function(e){
        clearCriterion();
        components.criterion = 'cpu';
        ths[1].setAttribute('class', 'ordered');
    },false);
    
    ths[2].addEventListener("click",function(e){
        clearCriterion();
        components.criterion = 'ram';
        ths[2].setAttribute('class', 'ordered');
    },false);
    
    ths[3].addEventListener("click",function(e){
        clearCriterion();
        components.criterion = 'hdd';
        ths[3].setAttribute('class', 'ordered');
    },false);
    
    endProcess.addEventListener("click",function(e){
        var trs = monitor.table.getElementsByTagName('tbody')[0].getElementsByTagName('tr');
        
        for(var i = 0; i < trs.length; i++){
            if(trs[i].getAttribute('class') == 'checked'){
                var pname = trs[i].getElementsByTagName('td')[0].getAttribute('data-title');
                removeRow(pname);
            } 
        }
        
    },false);
    
}

var generateUI = function(){
    generateHome();
}

/*test*/
function main()
{
    initComponents(4,2);
    addProcess();
    generateUI();
}

function draw(){
    step();
    animateHomePB();
    
    console.log("check table consistency: " + checkTableConsistency());
}

main();
setInterval(function(){draw()}, 3000);