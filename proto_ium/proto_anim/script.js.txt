/*
#########################################
    STRUTTURA DATI PER IL SIMULATORE
#########################################
*/
var hddStruct = 
{
    o: {x: 200.0, y: 200.0},
    radius1 : 45,
    radius2 : 85,
    radius3 : 125,
    l1: 
    {
        startAngle: 0,
        endAngle: 2*Math.PI,
        name: 'C:',
        color: '#F77D7D'
    },
    l2: [
            {
                startAngle: 0,
                endAngle: Math.PI / 4,
                name: 'DOC',
                color: 'red'
            },
            {
                startAngle: Math.PI / 4,
                endAngle: Math.PI / 2 + Math.PI / 3,
                name: 'PROG',
                color: 'yellow'
            },
            {
                startAngle: Math.PI / 2 + Math.PI / 3,
                endAngle: Math.PI,
                name: 'FILE',
                color: 'rgb(255, 204, 153)'
            },
            {
                startAngle: Math.PI,
                endAngle: Math.PI + Math.PI / 4,
                name: 'USER',
                color: 'blue'
            },
            {
                startAngle: Math.PI + Math.PI / 4,
                endAngle: 2*Math.PI,
                name: 'SYS',
                color: 'purple'
            }
        ],
    l3: [
            {
                startAngle: 0,
                endAngle: Math.PI / 6,
                name: 'IMG',
                color: 'rgb(212, 106, 106)'
            },
            {
                startAngle: Math.PI / 6,
                endAngle: Math.PI / 4 + Math.PI / 2,
                name: 'FILMS',
                color: 'rgb(71, 144, 48)'
            },
            {
                startAngle: Math.PI / 4 + Math.PI / 2,
                endAngle: Math.PI ,
                name: 'GAMES',
                color: 'rgb(112, 142, 164)'
            },
            {
                startAngle: Math.PI,
                endAngle: Math.PI + Math.PI / 8,
                name: 'NEW',
                color: 'rgb(255, 226, 170)'
            },
            {
                startAngle: Math.PI + Math.PI / 8,
                endAngle: Math.PI + Math.PI /6,
                name: 'IUM',
                color: 'rgb(170, 85, 133)'
            },
            {
                startAngle: Math.PI + Math.PI / 6,
                endAngle: Math.PI + Math.PI /2,
                name: 'MUSIC',
                color: 'rgb(170, 151, 57)'
            },
            {
                startAngle: Math.PI + Math.PI / 2,
                endAngle: 2 * Math.PI,
                name: 'UNI',
                color: 'rgb(251, 82, 82)'
            }        
        ],
}

var processDict = [
    'system',
    'windows explorer',
    'google chrome',
    'adobe reader',
    'vlc',
    'battlefield',
    'portal',
    'sublime text',
    'spotify',
    'netflix',
    'github',
    'visual studio',
    'photoshop',
    'doom',
    'nvidia manager',
    'microsoft edge',
    'android',
    'telegram',
    'paint',
    'file explorer',
    'cortana',
    'siri',
    'steam',
    'origin',
    'blender',
    'whatsapp',
    'google now',
    'virtual box',
    'windows media player',
    'illustrator',
    'gimp',
    'inkscape',
    'skype'
    ];
    
//struttura per la gestione dei dati
var components = {
    criterion: 'cpu',
    cpu: [],
    ram: 
        {
            color: "rgb(200,0,0)",
            size: 6, //6gb
            points: [{x: 0, y: 0}]
        },
    hdd: [],
    process: 
        [
            {
                name: processDict[0],
                cpu: 0,
                ram: 0,
                hdd: 0,
                check: false
            }    
        ]
}

var initComponents = function(n_cpu, n_hdd){
    
    if(n_cpu == undefined || n_hdd == undefined || isNaN(n_cpu) || isNaN(n_hdd) || n_cpu < 0 || n_hdd < 0){
        console.log("errore parametri inizializzazione");
        components = undefined;
        return;
    }

    for(var i = 0; i < n_cpu; i++)
        components.cpu.push(
            {
                num: i,
                name: "cpu_" + i,
                color: "rgb(200,0,0)",
                points: [{x: 0, y: 0}]
            }    
        );
        
    for(var i = 0; i < n_hdd; i++)
        components.hdd.push(
            {
                num: i,
                name: "hdd_" + i,
                color: "rgb(200,0,0)",
                points: [{x: 0, y: 0}]
            }    
        );
}
/*
######################################
                HDD
######################################
*/
var hddStep = function(){
    function currentUse(){
        var count = 0;
        
        for(var i = 0; i < components.process.length; i++)
            count += components.process[i].hdd;
            
        return count;
    }
    
    var totalUse = currentUse();
    var sum = 0;
    
    for(var i = 0; i < components.hdd.length - 1; i++){
        sum = pointsStep(components.hdd[i], totalUse, sum);
    }
    
    checkAndShift(components.hdd[i].points);
    
    components.hdd[i].points.push(
        {
            x: components.hdd[i].points.length * 20,
            y: totalUse - sum
        }
    );
}
/*
######################################
                RAM
######################################
*/
var ramStep = function(){
    function currentUse(){
        var count = 0;
        
        for(var i = 0; i < components.process.length; i++)
            count += components.process[i].ram;
            
        return count;
    }
    
    checkAndShift(components.ram.points);
    
    components.ram.points.push(
        {
            x: components.ram.points.length * 20,
            y: currentUse()
        }
    );
}
/*
######################################
                CPU
######################################
*/
var cpuStep = function(){
    function currentUse(){
        var count = 0;
        
        for(var i = 0; i < components.process.length; i++)
            count += components.process[i].cpu;
            
        return count;
    }
    
    var totalUse = currentUse();
    var sum = 0;
    
    for(var i = 0; i < components.cpu.length - 1; i++){
        sum = pointsStep(components.cpu[i], totalUse, sum);
    }
    
    checkAndShift(components.cpu[i].points);
    
    components.cpu[i].points.push(
        {
            x: components.cpu[i].points.length * 20,
            y: totalUse - sum
        }
    );
}
/*
######################################
            FUNZIONI COMUNI
######################################
*/

function checkAndShift(parr){
    if(parr.length == 20){
        parr.shift();
        parr.map(sub_x);
    }
}

function step(){
    processStep();
    processOrderCriterion(components.criterion);
    cpuStep();
    ramStep();
    hddStep();

}

function sub_x(p){p.x -= 20;}
    
var pointsStep = function(parr, totalUse, sum){

    checkAndShift(parr.points);
    
    var newY = Math.floor(Math.random() * (totalUse - sum));
    parr.points.push(
        {
            x: parr.points.length * 20,
            y: newY
        }
    );
        
    sum += newY;
    return sum;
}
/*
######################################
                PROCESS
######################################
*/
//non funge
var processOrderCriterion = function(criterion){
    if(criterion == 'cpu')
        components.process.sort(cpuCriterion);
    else if(criterion == 'ram')
        components.process.sort(ramCriterion);
    else if(criterion == 'hdd')
        components.process.sort(hddCriterion);
        
}

function cpuCriterion(p, q){
    if(p.cpu < q.cpu)
        return 1;
        
    if(p.cpu > q.cpu)
        return -1;
        
    return 0;
}

function ramCriterion(p, q){
    if(p.ram < q.ram)
        return 1;
        
    if(p.ram > q.ram)
        return -1;
        
    return 0;
}

function hddCriterion(p, q){
    if(p.hdd < q.hdd)
        return 1;
        
    if(p.hdd > q.hdd)
        return -1;
        
    return 0;
}

var addProcess = function(){
    var processName = processDict[Math.floor(Math.random()*(processDict.length - 1)) + 1];
    
    components.process.push(
        {
            name: processName,
            cpu: 0,
            ram: 0,
            hdd: 0,
            check: false
        }    
    );

    console.log("aggiunto processo: " + processName)
}

var processStep = function(){
    var cpu = Math.floor(Math.random()*100);
    cpu = Math.floor(cpu - (cpu * 65) / 100);
    var ram = Math.floor(Math.random()*100);
    ram = Math.floor(ram - (ram * 80) / 100);
    var hdd = Math.floor(Math.random()*100);
    hdd = Math.floor(hdd - (hdd * 90) / 100);
    var scpu = cpu, sram = ram, shdd = hdd;
    
    components.process[0].cpu = cpu;
    components.process[0].ram = ram;
    components.process[0].hdd = hdd;
    
    //ci tolgo una percentuale per rendere la simulazione pi√π reale
    for(var i = 1; i < components.process.length; i++){
        cpu = Math.floor(Math.random()*(100 - scpu));
        cpu = Math.floor(cpu - (cpu * 65) / 100);
        ram = Math.floor(Math.random()*(100 - sram));
        ram = Math.floor(ram - (ram * 80) / 100);
        hdd = Math.floor(Math.random()*(100 - shdd));
        hdd = Math.floor(hdd - (hdd * 90) / 100);
        scpu += cpu;
        sram += ram;
        shdd += hdd;
        
        components.process[i].cpu = cpu;
        components.process[i].ram = ram;
        components.process[i].hdd = hdd;
    }
}

var removeProcess = function(processName){
    var index = -1;

    if(processName == processDict[0]){
        console.log("impossibile eliminare system.exe");
        return false;
    }

    for(var i = 0; i < components.process.length; i++){
        if(components.process[i].name == processName){
            index = i;
            break;
        }
    }
    
    if(index > -1){
        components.process.splice(index, 1);
        console.log("processo " + processName + " eliminato. Si trovava in posizione " + index);
        return true;
    }
    else{
        console.log("nessun processo " + processName + " trovato")
        return false;
    }
        
}

var changeCheckProcess = function(pname){
    for(var i = 0; i < components.process.length; i++){
        if(components.process[i].name == pname)
            components.process[i].check = !components.process[i].check;
    }
}
/*
################################################################################
    STRUTTURA DATI PER UI
################################################################################
*/
var monitor = {
    currentView: 'home',
    homeContainer: undefined,
    cpuContainer: undefined,
    ramContainer: undefined,
    hddContainer: undefined,
    cpuHome: undefined,
    ramHome: undefined,
    hddHome: undefined,
    table: undefined,
    cpu_canvas: [],
    ram_canvas: {},//un solo canvas
    hdd_canvas: [],
    struct_canvas: {},
    cpu: [],
    ram: [],
    hdd: [],
    row: [] //le righe del task manager
}
/*
################################################################################
    ALG. ANIMAZIONE
################################################################################
/*
#########################################
    ALG. ANIMAZIONE HOME
#########################################
*/
var animateHomePB = function(){
    var totalCpu = 0;
    var totalRam = 0;
    var totalHdd = 0;
    
    for(var i = 0; i < components.process.length; i++){
        totalCpu += components.process[i].cpu;
        totalRam += components.process[i].ram;
        totalHdd += components.process[i].hdd;
    }
    var i = monitor.cpuHome.getElementsByClassName('progress')[0];
    monitor.cpuHome.getElementsByClassName('progress')[0].getElementsByTagName('span')[0].style.width = totalCpu + "%";
    monitor.cpuHome.getElementsByClassName('progress')[0].getElementsByTagName('span')[0].style.background = totalCpu <= 70 ? "rgba(0,255,22,1)": totalCpu < 90 ? "rgba(255,255,22,1)" : "rgba(229,61,0,1)";
    monitor.cpuHome.getElementsByTagName('span')[1].innerHTML = totalCpu + "%";
    monitor.ramHome.getElementsByClassName('progress')[0].getElementsByTagName('span')[0].style.width = totalRam + "%";
    monitor.ramHome.getElementsByClassName('progress')[0].getElementsByTagName('span')[0].style.background = totalRam <= 70 ? "rgba(0,255,22,1)": totalRam < 90 ? "rgba(255,255,22,1)" : "rgba(229,61,0,1)";
    monitor.ramHome.getElementsByTagName('span')[1].innerHTML = totalRam + "%";
    monitor.hddHome.getElementsByClassName('progress')[0].getElementsByTagName('span')[0].style.width = totalHdd + "%";
    monitor.hddHome.getElementsByTagName('span')[1].innerHTML = totalHdd + "%";
    monitor.hddHome.getElementsByClassName('progress')[0].getElementsByTagName('span')[0].style.background = totalHdd <= 70 ? "rgba(0,255,22,1)": totalHdd < 90 ? "rgba(255,255,22,1)" : "rgba(229,61,0,1)";
    animateTable();
}
/*
    per animare la tabella la cancello e la rigenero tutta da capo.
*/
var animateTable = function(){
   var oldtbody = monitor.table.getElementsByTagName('tbody')[0];
   var tbody = document.createElement('tbody');
   monitor.table.removeChild(oldtbody);
   monitor.table.appendChild(tbody);
   monitor.row = [];
   generateProcessTable();
}
/*
#########################################
    ALG. ANIMAZIONE CANVAS CONTAINER
#########################################
*/
function clearCanvas(canvas, ctx){
    ctx.save();
    ctx.setTransform(1, 0, 0, 1, 0, 0);
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.restore();
}

function drawAxis(canvas, ctx){
    ctx.strokeStyle = "rgb(0,0,0)";
    
    //mi serve per disegnare anche durante la traslazione
    ctx.save();
    ctx.globalAlpha = 0.3;
    ctx.setTransform(1, 0, 0, 1, 0, 0);

    //asse orizzontale
    for(var y = 0; y <= 5; y++){
        ctx.beginPath();
        ctx.lineTo(0, y*40)
        ctx.lineTo(canvas.width, y*40);
        ctx.stroke();
    }
    
    for(var x = 0; x <= 10; x++){
        ctx.beginPath();
        ctx.lineTo(x*40, 0);
        ctx.lineTo(x*40, canvas.height);
        ctx.stroke();
    }
    
    ctx.restore();
}

function drawLine(points, ctx, canvas){
    ctx.strokeStyle = "rgb(0,0,200)";
    ctx.beginPath();
    
    for(var p in points){
        p = points[p];
        ctx.lineTo(p.x, canvas.height - p.y * 2);//*2 √® la scala
    }

    ctx.stroke();
}

function drawPoint(points, ctx, canvas){
    ctx.fillStyle = "rgb(200,0,0)";
    
    for(var p in points){
        p = points[p];
        ctx.beginPath();
        ctx.arc(p.x, canvas.height - p.y* 2, 3, 2 * Math.PI, false);//*2 √® la scala
        ctx.fill();
    }

}
/*
#########################################
    ALG. ANIMAZIONE CPU CONTAINER
#########################################
*/
var animateCpuContainer = function(){
       for(var i = 0; i < monitor.cpu_canvas.length; i++){
            clearCanvas(monitor.cpu_canvas[i].canv, monitor.cpu_canvas[i].ctx);
            drawAxis(monitor.cpu_canvas[i].canv, monitor.cpu_canvas[i].ctx);
            drawLine(components.cpu[i].points, monitor.cpu_canvas[i].ctx, monitor.cpu_canvas[i].canv);
            drawPoint(components.cpu[i].points, monitor.cpu_canvas[i].ctx, monitor.cpu_canvas[i].canv);
       }
}
/*
#########################################
    ALG. ANIMAZIONE RAM CONTAINER
#########################################
*/
var animateRamContainer = function(){
    clearCanvas(monitor.ram_canvas.canv, monitor.ram_canvas.ctx);
    drawAxis(monitor.ram_canvas.canv, monitor.ram_canvas.ctx);
    drawLine(components.ram.points, monitor.ram_canvas.ctx, monitor.ram_canvas.canv);
    drawPoint(components.ram.points, monitor.ram_canvas.ctx, monitor.ram_canvas.canv);
}
/*
#########################################
    ALG. ANIMAZIONE HDD CONTAINER
#########################################
*/
var animateHddContainer = function(){
       for(var i = 0; i < monitor.hdd_canvas.length; i++){
            clearCanvas(monitor.hdd_canvas[i].canv, monitor.hdd_canvas[i].ctx);
            drawAxis(monitor.hdd_canvas[i].canv, monitor.hdd_canvas[i].ctx);
            drawLine(components.hdd[i].points, monitor.hdd_canvas[i].ctx, monitor.hdd_canvas[i].canv);
            drawPoint(components.hdd[i].points, monitor.hdd_canvas[i].ctx, monitor.hdd_canvas[i].canv);
       }
       
        clearCanvas(monitor.struct_canvas.canv, monitor.struct_canvas.ctx);
        drawHdd();
}
/*
################################################################################
    ALG. GENERAZIONE UI
################################################################################
*/
/*
#########################################
    ALG. GESTIONE PROCESS TABLE
#########################################
*/
var checkTableConsistency = function(){
    return monitor.row.length == components.process.length;
}

var addRow = function(p){
        var tr = document.createElement('tr');
        
        tr.addEventListener("click",function(e){
            var check = tr.getAttribute('class');
            var pname = tr.getElementsByTagName('td')[0].getAttribute('data-title');
            
            if(check == 'checked')
                tr.setAttribute('class', '');
            else
                tr.setAttribute('class', 'checked');
                
                changeCheckProcess(pname);
        },false);
        
        if(p.check == true)
            tr.setAttribute('class', 'checked');
            
        var processTD = document.createElement('td');
        processTD.setAttribute('data-title', p.name);
        
        var processLabel = document.createElement('label');
        processLabel.setAttribute('class', 'process_label');
        var cb = document.createElement('input');
        cb.type = 'checkbox';
        cb.class = 'class';
        cb.checked = p.check;
        cb.id = 'check_' + p.name;
        
        var spanName = document.createElement('span');
        spanName.innerHTML = p.name;
        
        var cputd = document.createElement('td');
        cputd.setAttribute('data-title', 'cpu');
        cputd.innerHTML = p.cpu;
        
        var ramtd = document.createElement('td');
        ramtd.setAttribute('data-title', 'ram');
        ramtd.innerHTML = p.ram;
        
        var hddtd = document.createElement('td');
        hddtd.setAttribute('data-title', 'hdd');
        hddtd.innerHTML = p.hdd;
    
        processLabel.appendChild(cb);
        processLabel.appendChild(spanName);
        processTD.appendChild(processLabel);
        tr.appendChild(processTD);
        tr.appendChild(cputd);
        tr.appendChild(ramtd);
        tr.appendChild(hddtd);
        
        return tr;
}

var removeRow = function(pname){
    var tbody = monitor.table.getElementsByTagName('tbody')[0];
    var rows = tbody.getElementsByTagName('tr');
    
    if(removeProcess(pname) == true){
        for(var i = 0; i < rows.length; i++){
            var processName = rows[i].getElementsByTagName('td')[0];
            
            if(processName.getAttribute('data-title') == pname){
                tbody.removeChild(rows[i]);
                monitor.row.splice(i, 1);
            }
        }
    }
}

var generateProcessTable = function(){
    var tbody = monitor.table.getElementsByTagName('tbody')[0];
    var endProcess = false;
    
    for(var p in components.process){
        p = components.process[p];
        
        var tr = addRow(p);
        
        if(endProcess == false && tr.getAttribute('class') == 'checked')
            endProcess = true;
        
        tbody.appendChild(tr);
        monitor.row.push(tr);
    }
    
    if(endProcess == true)
        document.getElementById('remove-process').style.display = '';
    else
        document.getElementById('remove-process').style.display = 'none';
}
/*
#########################################
    ALG. GENERAZIONE HOME
#########################################
*/
var generateHome = function(){
    monitor.cpuHome = document.getElementById('cpu-home');
    monitor.ramHome = document.getElementById('ram-home');
    monitor.hddHome = document.getElementById('hdd-home');
    monitor.table = document.getElementById('table');
    
    generateProcessTable();
    setHomeListeners();
}

var setHomeListeners = function(){
    var thead = monitor.table.getElementsByTagName('thead')[0];
    var ths = thead.getElementsByTagName('tr')[0].getElementsByTagName('th');
    var endProcess = document.getElementById('remove-process');
    
    function clearCriterion(){
        for(var i = 0; i < ths.length; i++)
            ths[i].setAttribute('class', '');
    }
    
    //ths[0] √® processName che non ha alcun impatto sull'ordine dei processi
    ths[1].addEventListener("click",function(e){
        clearCriterion();
        components.criterion = 'cpu';
        ths[1].setAttribute('class', 'ordered');
    },false);
    
    ths[2].addEventListener("click",function(e){
        clearCriterion();
        components.criterion = 'ram';
        ths[2].setAttribute('class', 'ordered');
    },false);
    
    ths[3].addEventListener("click",function(e){
        clearCriterion();
        components.criterion = 'hdd';
        ths[3].setAttribute('class', 'ordered');
    },false);
    
    endProcess.addEventListener("click",function(e){
        var trs = monitor.table.getElementsByTagName('tbody')[0].getElementsByTagName('tr');
        
        for(var i = 0; i < trs.length; i++){
            if(trs[i].getAttribute('class') == 'checked'){
                var pname = trs[i].getElementsByTagName('td')[0].getAttribute('data-title');
                removeRow(pname);
            } 
        }
        
    },false);
    
}
/*
#########################################
    ALG. GENERAZIONE CPU CONTAINER
#########################################
*/
var generateCpuContainer = function(){
    var cpu_charts = monitor.cpuContainer.getElementsByClassName('cpu-charts')[0];
    
    for(var i = 0; i < components.cpu.length; i++){
        var container = generateContainer('CPU ' + i);
        var canvas = generateCanvas('cpu_canvas_' + i, '400px', '200px');
        container.appendChild(canvas);
        cpu_charts.appendChild(container);
        
        monitor.cpu_canvas.push(
            {
                ctx: canvas.getContext('2d'),
                canv: canvas
            }
        );
    }
}
/*
#########################################
    ALG. GENERAZIONE RAM CONTAINER
#########################################
*/
var generateRamContainer = function(){
    var ram_charts = monitor.ramContainer.getElementsByClassName('ram-charts')[0];
    var container = generateContainer('RAM');
    var canvas = generateCanvas('ram_canvas', '400px', '200px');
    container.appendChild(canvas);
    ram_charts.appendChild(container);
    
    monitor.ram_canvas =
        {
            ctx: canvas.getContext('2d'),
            canv: canvas
        };
}
/*
#########################################
    ALG. GENERAZIONE HDD CONTAINER
#########################################
*/
var generateHddContainer = function(){
    var hdd_charts = monitor.hddContainer.getElementsByClassName('hdd-charts')[0];
    for(var i = 0; i < components.hdd.length; i++){
        var container = generateContainer('HDD ' + i);
        var canvas = generateCanvas('hdd_canvas_' + i, '400px', '200px');
        container.appendChild(canvas);
        hdd_charts.appendChild(container);
        
        monitor.hdd_canvas.push(
            {
                ctx: canvas.getContext('2d'),
                canv: canvas
            }
        );
    }
    
    var sContainer = generateContainer('HDD STRUCT');
    var sCanvas = generateCanvas('struct_canvas', '400px', '400px');
    sContainer.appendChild(sCanvas);
    hdd_charts.appendChild(sContainer);
    
    monitor.struct_canvas = {
        ctx: sCanvas.getContext('2d'),
        canv: sCanvas
    };
    
    
    monitor.struct_canvas.ctx.beginPath();
    monitor.struct_canvas.ctx.arc(200,145,3,0,2*Math.PI, false);
    monitor.struct_canvas.ctx.stroke();
    
}
/*
#########################################
    ALG. GENERAZIONE UI COMUNI
#########################################
*/
function generateCanvas(canvasId, w, h){
    var canvas = document.createElement('canvas');
    canvas.setAttribute('class', 'canvas');
    canvas.setAttribute('id', canvasId);
    canvas.setAttribute('width', w);
    canvas.setAttribute('height', h);
    return canvas;
}

function generateContainer(spanText){
    var container = document.createElement('div');
    container.setAttribute('class', 'canvas_container');
    var name = document.createElement('h5');
    name.setAttribute('class', 'subHeader');
    var span = document.createElement('span');
    span.innerHTML = spanText;
    name.appendChild(span);
    container.appendChild(name);
    
    return container;
}

var setGeneralListeners = function(){
    var navbar = document.getElementById('navbar');
    var ul = navbar.getElementsByTagName('ul')[0];
    var li = ul.getElementsByTagName('li');
    
    function clearTabs(){
        for(var i = 0; i < li.length; i++){
            li[i].setAttribute('class', '');
        }
        
        monitor.homeContainer.style.display = 'none';
        monitor.cpuContainer.style.display = 'none';
        monitor.ramContainer.style.display = 'none';
        monitor.hddContainer.style.display = 'none';
    }
    
    function fadeOut(view){
        var opacity = 1;
        var fadeEffect = setInterval(function () {
            if (opacity == 0) {
                view.style.opacity = 1;
            }
            if (opacity < 0.1) {
                clearInterval(fadeEffect);
            } else {
                view.style.opaticy = opacity;
                opacity -= 0.1;
            }
        }, 80);
    }
    
    function fadeIn(view){
        var opacity = 0.0;
        var fadeEffect = setInterval(function () {
            if (opacity == 1) {
                view.style.opacity = 1;
            }
            if (opacity > 0.9) {
                clearInterval(fadeEffect);
            } else {
                view.style.opacity = opacity;
                opacity += 0.1;
            }
        }, 150);
    }
    
    function startFadeOut(){
        if(monitor.currentView == 'home')
            fadeOut(monitor.homeContainer);
        else if(monitor.currentView == 'cpu')
            fadeOut(monitor.cpuContainer);
        else if(monitor.currentView == 'ram')
            fadeOut(monitor.ramContainer);
        else if(monitor.currentView == 'hdd')
            fadeOut(monitor.hddContainer);
    }
    
    li[0].addEventListener("click",function(e){
        clearTabs();
        li[0].setAttribute('class', 'menu_selected');
        monitor.homeContainer.style.display = '';
        startFadeOut();
        monitor.currentView = 'home';
        fadeIn(monitor.homeContainer);
    },false);
    
    li[1].addEventListener("click",function(e){
        clearTabs();
        li[1].setAttribute('class', 'menu_selected');
        monitor.cpuContainer.style.display = '';
        monitor.currentView = 'cpu';
        fadeIn(monitor.cpuContainer);
    },false);
    
    li[2].addEventListener("click",function(e){
        clearTabs();
        li[2].setAttribute('class', 'menu_selected');
        monitor.ramContainer.style.display = '';
        monitor.currentView = 'ram';
        fadeIn(monitor.ramContainer);
    },false);
    
    li[3].addEventListener("click",function(e){
        clearTabs();
        li[3].setAttribute('class', 'menu_selected');
        monitor.hddContainer.style.display = '';
        monitor.currentView = 'hdd'
        fadeIn(monitor.hddContainer);
    },false);
    
    monitor.struct_canvas.canv.addEventListener('mousemove', function(e){
    var mousePos = getMousePosition(monitor.struct_canvas.canv, e);
    console.log(mousePos);
    hit(mousePos);
}, false);
}

var generateUI = function(){
    monitor.homeContainer = document.getElementById('home_container');
    monitor.cpuContainer = document.getElementById('cpu_container');
    monitor.ramContainer = document.getElementById('ram_container');
    monitor.hddContainer = document.getElementById('hdd_container');
    
    generateHome();
    generateCpuContainer();
    generateRamContainer();
    generateHddContainer();
    setGeneralListeners();
}

function getMousePosition(canvas, e){
    var rect = canvas.getBoundingClientRect();
    return {
            x: e.clientX - rect.left,
            y: e.clientY - rect.top
        };
}

function hit(point){
    var p = {x: point.x - 200, y: point.y - 200};
    var angle = Math.atan2(p.x, p.y);
    //da modificare con radius3
    if(Math.pow(p.x, 2) + Math.pow(p.y, 2) < Math.pow(hddStruct.radius3, 2)){

        if(p.x < 0 && p.y > 0){
            angle = Math.PI / 2 + Math.abs(angle);
            //console.log("quad 1: " + angle);
        }
        else if(p.x < 0 && p.y < 0){
            angle = Math.PI / 2 + Math.abs(angle);
            //console.log("quad 2: " + angle);
        }
        else if(p.x > 0 && p.y < 0){
            angle = 2 * Math.PI - Math.abs(Math.PI / 2 - angle);
            //console.log("quad 3: " + angle);
        }
        else{
            angle = Math.PI / 2 - angle;
            //console.log("quad 0: " + angle);
        }
        
        if(Math.pow(p.x, 2) + Math.pow(p.y, 2) < Math.pow(hddStruct.radius1, 2)){
            animate(hddStruct.l1, hddStruct.radius1 + 20, 1);   
        }
        else if(Math.pow(p.x, 2) + Math.pow(p.y, 2) < Math.pow(hddStruct.radius2, 2)){
            console.log('l2');
            for(var i = 0; i < hddStruct.l2.length; i++){
                if(angle > hddStruct.l2[i].startAngle && angle < hddStruct.l2[i].endAngle){
                    console.log("il punto appartiene al settore " + hddStruct.l2[i].color.toLocaleUpperCase());
                    animate(hddStruct.l2[i], hddStruct.radius2 + 60, 2);
                }
            }
        }
        else if(Math.pow(p.x, 2) + Math.pow(p.y, 2) < Math.pow(hddStruct.radius3, 2)){
            console.log('l3');
            for(var i = 0; i < hddStruct.l3.length; i++){
                if(angle > hddStruct.l3[i].startAngle && angle < hddStruct.l3[i].endAngle){
                    console.log("il punto appartiene al settore " + hddStruct.l3[i].color.toLocaleUpperCase());
                    animate(hddStruct.l3[i], hddStruct.radius3 + 60, 3);
                }
            }
        }
    }
    else{
        drawHdd();
    }
}

function animate(s, radius, level){
    drawHdd();
    console.log("LEVEL = " + level);
    if(level == 3){
        drawSectors(hddStruct.l3, hddStruct.radius3);
        drawCircle(s.startAngle, s.endAngle, radius, s.color);
        drawSectors(hddStruct.l2, hddStruct.radius2);
    }
    else if(level == 2){
        drawSectors(hddStruct.l3, hddStruct.radius3);
        drawSectors(hddStruct.l2, hddStruct.radius2);
        drawCircle(s.startAngle, s.endAngle, radius, s.color);
    }
    
    if(level != 1){
        drawCircle(hddStruct.l1.startAngle, hddStruct.l1.endAngle, hddStruct.radius1, hddStruct.l1.color);
        var center = calcCenter(s, radius, level);
        drawText(s, center);
    }
    else{
        drawCircle(s.startAngle, s.endAngle, radius, s.color);
        drawText(s, {x: 200.0, y: 200.0});
    }
}

function drawText(s, p){
    var ctx = monitor.struct_canvas.ctx;
    
    ctx.font = "Bold 17px Roboto";
    ctx.fillStyle = 'black';
    ctx.fillText(s.name, p.x, p.y);
}

function drawCircle(startAngle, endAngle, radius, color){
    var ctx = monitor.struct_canvas.ctx;
    
    ctx.fillStyle = color;
    ctx.strokeStyle = color;
    ctx.beginPath();
    ctx.lineTo(200,200);
    ctx.arc(200, 200, radius, startAngle, endAngle, false);
    ctx.lineTo(200,200);
    ctx.stroke();
    ctx.fill();
}

function drawHdd(){
    clearCanvas(monitor.struct_canvas.canv, monitor.struct_canvas.ctx);
    drawSectors(hddStruct.l3, hddStruct.radius3);
    drawSectors(hddStruct.l2, hddStruct.radius2);
    drawCircle(hddStruct.l1.startAngle, hddStruct.l1.endAngle, hddStruct.radius1, hddStruct.l1.color);
}

function drawSectors(s, r){
    for(var i = 0; i < s.length; i++){
        drawCircle(s[i].startAngle, s[i].endAngle, r, s[i].color);
    }
}

function calcCenter(sector, radius, level){
    var offset = 0;
    
    if(level != 1){
        if(Math.abs(sector.startAngle - sector.endAngle) > Math.PI / 4)
            offset = 100;
        else
            offset = 30;
    }
    
    radius += offset;
    
    var o = {
        x: 200,
        y: 200
    }
    
    var ps = {
        x: o.x + radius * (Math.cos(sector.startAngle)),
        y: o.y + radius * (Math.sin(sector.startAngle))
    }
    
    var pe = {
        x: o.x + radius * (Math.cos(sector.endAngle)),
        y: o.y + radius * (Math.sin(sector.endAngle))
    }
    
    var center = {
        x: ((o.x + ps.x + pe.x) / 3),
        y: ((o.y + ps.y + pe.y) / 3) 
    }

    return center;
}

/*main*/
function main()
{
    initComponents(4,2);
    console.log(components);
    
    for(var i = 0; i < 5; i++)
        addProcess();
    
    generateUI();
}

function draw(){
    step();
    animateHomePB();
    animateCpuContainer();
    animateRamContainer();
    animateHddContainer();
    console.log("check table consistency: " + checkTableConsistency());
}

main();
setInterval(function(){draw()}, 1100);